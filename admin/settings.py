"""
Django settings for admin project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from functools import partial
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import dj_database_url
from decouple import config, Csv

# Conf Sentry
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Como o retorno deve ser um booleano, usa-se então um cast como segundo parâmetro.
DEBUG = config('DEBUG', cast=bool)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.base',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'admin.urls'

INTERNAL_IPS = config('INTERNAL_IPS', cast=Csv(), default='127.0.0.1')  # cast=Csv()

# Conf da app debug toolbar
if DEBUG:
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware',)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

default_db_url = 'sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3')

parse_database = partial(dj_database_url.parse, conn_max_age=600)

DATABASES = {

    'default': config('DATABASE_URL', default=default_db_url, cast=parse_database)

    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     #'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Recife'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# Configura~~ao de ambiente de desenvolvimento
STATIC_URL = '/static/'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Conf para o Gunicorn servir staticfiles
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#
# AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
#
# # STORAGE CONFIGURATION IN S3 AWS
# if AWS_ACCESS_KEY_ID:
#     AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
#     AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
#     # AWS_OBJECT_PARAMETERS = {'CacheControl': 'max=age=86400'}
#     # AWS_PRELOAD_METADATA = True
#     # AWS_AUTO_CREATE_BUCKET = False
#     # AWS_QUERYSTRING_AUTH = True
#     # AWS_S3_CUSTOM_DOMAIN = None
#     # AWS_DEFAULT_ACL = 'private'
#
# # Static Assets
#     STATICFILES_STORAGE = 's3_folder_storage.s3.StaticStorage'  # Classe para gestão os statifiles
#     STATIC_S3_PATH = 'static'  #
#     STATIC_ROOT = f'/{STATIC_S3_PATH}/'
#     STATIC_URL = f'//s3.amazonaws.com/{AWS_STORAGE_BUCKET_NAME}/{STATIC_S3_PATH}/'
#     ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'
#
# # Upload Media Folder
#     DEFAULT_FILE_STORAGE = 's3_folder_storage.s3.StaticStorage'  # Classe para gestão os statifiles
#     DEFAULT_S3_PATH = 'media'  #
#     MEDIA_ROOT = f'/{DEFAULT_S3_PATH}/'
#     MEDIA_URL = f'//s3.amazonaws.com/{AWS_STORAGE_BUCKET_NAME}/{DEFAULT_S3_PATH}/'
#
#     # Append de apps da aws na lista INSTALLED_APPS na linha 38
#     INSTALLED_APPS.append('s3_folder_storage')
#     INSTALLED_APPS.append('storages')
#
#     # OBS Após configurações acima para a aws rode o comando:
#     # python manager.py collectstatic --no-input


# Conf Table User
AUTH_USER_MODEL = 'base.User'

# Conf do SENTRY(Monitor de falhas)
SENTRY_DSN = config('SENTRY_DSN', default=None)

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN, integrations=[DjangoIntegration()], traces_sample_rate=1.0,
        send_default_pii=True
    )
